# ***************************************************************
# Copyright (c) 2021 Jittor. All Rights Reserved. 
# Maintainers: 
#     Guowei Yang <471184555@qq.com>
#     Wenyang Zhou <576825820@qq.com>
#     Dun Liang <randonlang@gmail.com>. 
# 
# This file is subject to the terms and conditions defined in
# file 'LICENSE.txt', which is part of this source code package.
# ***************************************************************
# This model is generated by pytorch converter.
import jittor as jt
from jittor import nn

from jdet.utils.registry import BACKBONES

import math


__all__ = ['ResNetMLoRand', 'Resnet50LoRand']

def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):
    conv=nn.Conv(in_planes, out_planes, kernel_size=3, stride=stride, padding=dilation, groups=groups, bias=False, dilation=dilation)
    jt.init.relu_invariant_gauss_(conv.weight, mode="fan_out")
    return conv

def conv1x1(in_planes, out_planes, stride=1):
    conv=nn.Conv(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)
    jt.init.relu_invariant_gauss_(conv.weight, mode="fan_out")
    return conv


# INNER_DIM = 64
#
#
# class MonaOp(nn.Module):
#     def __init__(self, in_features):
#         super().__init__()
#         # 确保所有卷积的groups与输入输出通道严格对齐
#         self.conv1 = nn.Conv2d(in_features, in_features,
#                                kernel_size=3, padding=1,
#                                groups=in_features)
#         self.conv2 = nn.Conv2d(in_features, in_features,
#                                kernel_size=5, padding=2,
#                                groups=in_features)
#         self.conv3 = nn.Conv2d(in_features, in_features,
#                                kernel_size=7, padding=3,
#                                groups=in_features)
#         self.projector = nn.Conv2d(in_features, in_features, kernel_size=1)
#
#     def execute(self, x):
#         identity = x
#         # 通道数三重校验
#         assert x.shape[1] == self.conv1.in_channels
#         assert x.shape[1] == self.conv1.out_channels
#         assert x.shape[1] == self.conv1.groups
#
#         x = (self.conv1(x) + self.conv2(x) + self.conv3(x)) / 3.0 + identity
#         return identity + self.projector(x)
#
#
# class Mona(nn.Module):
#     def __init__(self, in_dim, factor=4):
#         super().__init__()
#         # 1x1卷积保持维度
#         self.project1 = nn.Conv2d(in_dim, INNER_DIM, kernel_size=1)
#         self.project2 = nn.Conv2d(INNER_DIM, in_dim, kernel_size=1)
#         self.dropout = nn.Dropout(p=0.1)
#         self.adapter_conv = MonaOp(INNER_DIM)
#
#         self.act = nn.GELU()
#
#         # 通道数对齐的归一化层
#         self.norm = nn.BatchNorm2d(in_dim)  # 替换为更适合卷积的BN
#         self.gamma = nn.Parameter(jt.ones(1, in_dim, 1, 1) * 1e-6)
#         self.gammax = nn.Parameter(jt.ones(1, in_dim, 1, 1))
#
#     def execute(self, x):
#         identity = x
#
#         # 4D张量处理
#         x = self.norm(x)
#         x = x * self.gamma + identity * self.gammax  # 逐通道缩放
#
#         # 特征转换流程
#         x = self.project1(x)
#         x = self.adapter_conv(x)
#         x = self.act(x)
#         x = self.dropout(x)
#         x = self.project2(x)
#
#         return identity + x


class Lorand_Multi(nn.Module):
    def __init__(self, in_features, out_features, bias=True,
                 num_branch=2, kernel_dim=2):
        super().__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.num_branch = num_branch
        self.kernel_dim = kernel_dim

        # 正确的方式：直接创建Parameter属性
        for i in range(num_branch):
            # 创建分支参数
            A = nn.Parameter(jt.zeros((in_features, kernel_dim)))
            nn.init.kaiming_uniform_(A, a=math.sqrt(5))
            setattr(self, f"A_{i}", A)

            g = nn.Parameter(jt.zeros((kernel_dim, kernel_dim)))
            nn.init.kaiming_uniform_(g, a=math.sqrt(5))
            setattr(self, f"g_{i}", g)

            B = nn.Parameter(jt.zeros((kernel_dim, out_features)))
            nn.init.kaiming_uniform_(B, a=math.sqrt(5))
            setattr(self, f"B_{i}", B)

        # 偏置处理
        if bias:
            self.bias = nn.Parameter(jt.zeros((out_features,)))
            # 简单合理的偏置初始化
            fan_in = in_features
            if fan_in != 0:
                bound = 1 / math.sqrt(fan_in)
                nn.init.uniform_(self.bias, -bound, bound)
        else:
            self.bias = None

    def execute(self, x):
        """执行线性变换计算"""
        # 创建初始权重矩阵
        weight = jt.zeros((self.out_features, self.in_features))

        # 计算组合权重
        for i in range(self.num_branch):
            # 获取分支参数
            A = getattr(self, f"A_{i}")
            g = getattr(self, f"g_{i}")
            B = getattr(self, f"B_{i}")

            # 计算分支权重并累加: A(gB)
            branch_weight = A @ (g @ B)
            weight += branch_weight.t()  # 转置为(输出维度, 输入维度)

        # Jittor中的线性变换
        return nn.linear(x, weight, self.bias)


class Lorand(nn.Module):
    def __init__(self, in_dim, factor=4):
        super().__init__()
        # 降维层
        self.project1 = Lorand_Multi(in_dim, in_dim // factor,
                                     num_branch=4, kernel_dim=8)
        # 激活函数
        self.gelu = nn.GELU()
        # 升维层
        self.project2 = Lorand_Multi(in_dim // factor, in_dim,
                                     num_branch=4, kernel_dim=8)

    def execute(self, x):
        """处理4D特征图"""
        # 获取输入形状
        B, C, H, W = x.shape

        # 展平处理：(B, C, H, W) → (B*H*W, C)
        x_flat = x.permute(0, 2, 3, 1).reshape(-1, C)

        # 执行计算
        out1 = self.project1(x_flat)
        activated = self.gelu(out1)
        out2 = self.project2(activated)

        # 恢复形状：(B*H*W, C) → (B, H, W, C) → (B, C, H, W)
        restored = out2.reshape(B, H, W, C).permute(0, 3, 1, 2)

        # 残差连接
        return x + restored




class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1, base_width=64, dilation=1, norm_layer=None):
        super(BasicBlock, self).__init__()
        if (norm_layer is None):
            norm_layer = nn.BatchNorm
        if ((groups != 1) or (base_width != 64)):
            raise ValueError('BasicBlock only supports groups=1 and base_width=64')
        if (dilation > 1):
            raise NotImplementedError('Dilation > 1 not supported in BasicBlock')
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = norm_layer(planes)
        self.relu = nn.Relu()
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = norm_layer(planes)
        self.downsample = downsample
        self.stride = stride

    def execute(self, x):
        identity = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if (self.downsample is not None):
            identity = self.downsample(x)
        out += identity
        out = self.relu(out)
        return out

class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1, base_width=64, dilation=1, norm_layer=None):
        super(Bottleneck, self).__init__()
        if (norm_layer is None):
            norm_layer = nn.BatchNorm
        width = (int((planes * (base_width / 64.0))) * groups)
        self.conv1 = conv1x1(inplanes, width)
        self.bn1 = norm_layer(width)
        self.conv2 = conv3x3(width, width, stride, groups, dilation)
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, (planes * self.expansion))
        self.bn3 = norm_layer((planes * self.expansion))
        self.relu = nn.Relu()
        self.downsample = downsample
        self.stride = stride

        # self.mona = Mona(width * self.expansion)
        self.lorand = Lorand(width * self.expansion, 2)

        # self.adapter1 = Adapter(width, self.adapter)

    def execute(self, x):
        identity = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)
        out = self.conv3(out)
        out = self.bn3(out)

        # out = self.mona(out)
        out = self.lorand(out)

        if (self.downsample is not None):
            identity = self.downsample(x)
        out += identity
        out = self.relu(out)
        return out

@BACKBONES.register_module()
class ResNetMLoRand(nn.Module):

    def __init__(self, block, layers, return_stages=["layer4"],frozen_stages=-1,norm_eval=True,num_classes=None, groups=1, width_per_group=64, replace_stride_with_dilation=None, norm_layer=None):
        super(ResNetMLoRand, self).__init__()
        if (norm_layer is None):
            norm_layer = nn.BatchNorm
        self.frozen_stages = frozen_stages
        self.norm_eval = norm_eval
        self._norm_layer = norm_layer
        self.inplanes = 64
        self.dilation = 1
        if (replace_stride_with_dilation is None):
            replace_stride_with_dilation = [False, False, False]
        if (len(replace_stride_with_dilation) != 3):
            raise ValueError('replace_stride_with_dilation should be None or a 3-element tuple, got {}'.format(replace_stride_with_dilation))
        self.groups = groups
        self.base_width = width_per_group
        self.conv1 = nn.Conv(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False)
        jt.init.relu_invariant_gauss_(self.conv1.weight, mode="fan_out")
        self.bn1 = norm_layer(self.inplanes)
        self.relu = nn.Relu()
        self.maxpool = nn.Pool(kernel_size=3, stride=2, padding=1, op='maximum')
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2, dilate=replace_stride_with_dilation[0])
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2, dilate=replace_stride_with_dilation[1])
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2, dilate=replace_stride_with_dilation[2])
        self.num_classes=num_classes
        self.return_stages = return_stages
        if num_classes is not None:
            self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
            self.fc = nn.Linear((512 * block.expansion), num_classes)
        self._freeze_stages()

    def _make_layer(self, block, planes, blocks, stride=1, dilate=False):
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if ((stride != 1) or (self.inplanes != (planes * block.expansion))):
            downsample = nn.Sequential(conv1x1(self.inplanes, (planes * block.expansion), stride), norm_layer((planes * block.expansion)))
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, self.groups, self.base_width, previous_dilation, norm_layer))
        self.inplanes = (planes * block.expansion)
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups=self.groups, base_width=self.base_width, dilation=self.dilation, norm_layer=norm_layer))
        return nn.Sequential(*layers)      

    def _freeze_stages(self):
        if self.frozen_stages >= 0:
            self.bn1.eval()
            for m in [self.conv1, self.bn1]:
                for param in m.parameters():
                    param.stop_grad()  

        for i in range(1, self.frozen_stages + 1):
            m = getattr(self, 'layer{}'.format(i))
            m.eval()
            for param in m.parameters():
                param.stop_grad()

    def _freeze_most_params(self):
        for name, param in self.named_parameters():
            # print(name)
            if "mona" not in name:  # train mona only.
                param.requires_grad = False
                print(name)

    def execute(self, x):
        outputs = []
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)
        for i in range(1,5):
            name = f"layer{i}"
            x = getattr(self,name)(x)
            if name in self.return_stages:
                outputs.append(x)
        if self.num_classes is not None:
            x = self.avgpool(x)
            x = jt.reshape(x, (x.shape[0], -1))
            x = self.fc(x)
            if "fc" in self.return_stages:
                outputs.append(x)
        return tuple(outputs)

    def train(self):
        super(ResNetMLoRand, self).train()
        self._freeze_stages()
        self._freeze_most_params()
        if self.norm_eval:
            for m in self.modules():
                # trick: eval have effect on BatchNorm only
                if isinstance(m, nn.BatchNorm):
                    m.eval()


def _resnet(block, layers, **kwargs):
    model = ResNetMLoRand(block, layers, **kwargs)
    return model

# @BACKBONES.register_module()
# def Resnet18(pretrained=False, **kwargs):
#     model = _resnet(BasicBlock, [2, 2, 2, 2], **kwargs)
#     if pretrained: model.load("jittorhub://resnet18.pkl")
#     return model
# resnet18 = Resnet18
#
# @BACKBONES.register_module()
# def Resnet34(pretrained=False, **kwargs):
#     model = _resnet(BasicBlock, [3, 4, 6, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnet34.pkl")
#     return model
# resnet34 = Resnet34

@BACKBONES.register_module()
def Resnet50LoRand(pretrained=False, **kwargs):
    model = _resnet(Bottleneck, [3, 4, 6, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet50.pkl")
    return model

# @BACKBONES.register_module()
# def Resnet38(**kwargs):
#     return _resnet(Bottleneck, [2, 3, 5, 2], **kwargs)
#
# @BACKBONES.register_module()
# def Resnet26(**kwargs):
#     return _resnet(Bottleneck, [1, 2, 4, 1], **kwargs)
#
# @BACKBONES.register_module()
# def Resnet101(pretrained=False, **kwargs):
#     """
#     ResNet-101 model architecture.
#     Example::
#         model = jittor.models.Resnet101()
#         x = jittor.random([10,3,224,224])
#         y = model(x) # [10, 1000]
#     """
#     model = _resnet(Bottleneck, [3, 4, 23, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnet101.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Resnet152(pretrained=False, **kwargs):
#     model = _resnet(Bottleneck, [3, 8, 36, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnet152.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Resnext50_32x4d(pretrained=False, **kwargs):
#     kwargs['groups'] = 32
#     kwargs['width_per_group'] = 4
#     model = _resnet(Bottleneck, [3, 4, 6, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnext50_32x4d.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Resnext101_32x8d(pretrained=False, **kwargs):
#     kwargs['groups'] = 32
#     kwargs['width_per_group'] = 8
#     model = _resnet(Bottleneck, [3, 4, 23, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnext101_32x8d.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Wide_resnet50_2(pretrained=False, **kwargs):
#     kwargs['width_per_group'] = (64 * 2)
#     model = _resnet(Bottleneck, [3, 4, 6, 3], **kwargs)
#     if pretrained: model.load("jittorhub://wide_resnet50_2.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Wide_resnet101_2(pretrained=False, **kwargs):
#     kwargs['width_per_group'] = (64 * 2)
#     model = _resnet(Bottleneck, [3, 4, 23, 3], **kwargs)
#     if pretrained: model.load("jittorhub://wide_resnet101_2.pkl")
#     return model

# class ResNet_v1d(nn.Module):
#     def __init__(self, block, layers, return_stages=["layer4"],frozen_stages=-1,norm_eval=True,num_classes=None, groups=1, width_per_group=64, replace_stride_with_dilation=None, norm_layer=None):
#         super(ResNet_v1d, self).__init__()
#         if (norm_layer is None):
#             norm_layer = nn.BatchNorm
#         self.frozen_stages = frozen_stages
#         self.norm_eval = norm_eval
#         self._norm_layer = norm_layer
#         self.inplanes = 64
#         self.dilation = 1
#         if (replace_stride_with_dilation is None):
#             replace_stride_with_dilation = [False, False, False]
#         if (len(replace_stride_with_dilation) != 3):
#             raise ValueError('replace_stride_with_dilation should be None or a 3-element tuple, got {}'.format(replace_stride_with_dilation))
#         self.groups = groups
#         self.base_width = width_per_group
#         self.C1 = nn.Sequential(
#             nn.Conv(3, 32, kernel_size=3, stride=2, padding=1, bias=False),
#             norm_layer(32),
#             nn.Relu(),
#             nn.Conv(32, 32, kernel_size=3, stride=1, padding=1, bias=False),
#             norm_layer(32),
#             nn.Relu(),
#             nn.Conv(32, 64, kernel_size=3, stride=1, padding=1, bias=False),
#             norm_layer(64),
#             nn.Relu(),
#         )
#
#         self.relu = nn.Relu()
#         self.maxpool = nn.Pool(kernel_size=3, stride=2, padding=1, op='maximum')
#         self.layer1 = self._make_layer(block, 64, layers[0])
#         self.layer2 = self._make_layer(block, 128, layers[1], stride=2, dilate=replace_stride_with_dilation[0])
#         self.layer3 = self._make_layer(block, 256, layers[2], stride=2, dilate=replace_stride_with_dilation[1])
#         self.layer4 = self._make_layer(block, 512, layers[3], stride=2, dilate=replace_stride_with_dilation[2])
#         self.num_classes=num_classes
#         self.return_stages = return_stages
#         if num_classes is not None:
#             self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
#             self.fc = nn.Linear((512 * block.expansion), num_classes)
#
#     def _make_layer(self, block, planes, blocks, stride=1, dilate=False):
#         norm_layer = self._norm_layer
#         downsample = None
#         previous_dilation = self.dilation
#         if dilate:
#             self.dilation *= stride
#             stride = 1
#         if ((stride != 1) or (self.inplanes != (planes * block.expansion))):
#             downsample = nn.Sequential(nn.Pool(stride, stride=stride, op="mean"), conv1x1(self.inplanes, (planes * block.expansion), 1), norm_layer((planes * block.expansion)))
#         layers = []
#         layers.append(block(self.inplanes, planes, stride, downsample, self.groups, self.base_width, previous_dilation, norm_layer))
#         self.inplanes = (planes * block.expansion)
#         for _ in range(1, blocks):
#             layers.append(block(self.inplanes, planes, groups=self.groups, base_width=self.base_width, dilation=self.dilation, norm_layer=norm_layer))
#         return nn.Sequential(*layers)
#
#     def execute(self, x):
#         outputs = []
#         x = self.C1(x)
#         x = self.maxpool(x)
#         for i in range(1,5):
#             name = f"layer{i}"
#             x = getattr(self,name)(x)
#             if name in self.return_stages:
#                 outputs.append(x)
#         if self.num_classes is not None:
#             x = self.avgpool(x)
#             x = jt.reshape(x, (x.shape[0], -1))
#             x = self.fc(x)
#             if "fc" in self.return_stages:
#                 outputs.append(x)
#         return outputs
#
#     def _freeze_stages(self):
#         if self.frozen_stages >= 0:
#             self.bn1.eval()
#             for m in [self.conv1, self.bn1]:
#                 for param in m.parameters():
#                     param.stop_grad()
#
#         for i in range(1, self.frozen_stages + 1):
#             m = getattr(self, 'layer{}'.format(i))
#             m.eval()
#             for param in m.parameters():
#                 param.stop_grad()
#
#     def train(self):
#         super(ResNet_v1d, self).train()
#         self._freeze_stages()
#         if self.norm_eval:
#             for m in self.modules():
#                 # trick: eval have effect on BatchNorm only
#                 if isinstance(m, nn.BatchNorm):
#                     m.eval()
#
# def _resnet_v1d(block, layers, **kwargs):
#     model = ResNet_v1d(block, layers, **kwargs)
#     return model
#
# @BACKBONES.register_module()
# def Resnet18_v1d(pretrained=False, **kwargs):
#     model = _resnet_v1d(BasicBlock, [2, 2, 2, 2], **kwargs)
#     if pretrained: model.load("jittorhub://resnet18.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Resnet34_v1d(pretrained=False, **kwargs):
#     model = _resnet_v1d(BasicBlock, [3, 4, 6, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnet34.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Resnet50_v1d(pretrained=False, **kwargs):
#     model = _resnet_v1d(Bottleneck, [3, 4, 6, 3], **kwargs)
#     # if pretrained: model.load("jittorhub://resnet50.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Resnet101_v1d(pretrained=False, **kwargs):
#     model = _resnet_v1d(Bottleneck, [3, 4, 23, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnet101.pkl")
#     return model
#
# @BACKBONES.register_module()
# def Resnet152_v1d(pretrained=False, **kwargs):
#     model = _resnet_v1d(Bottleneck, [3, 8, 36, 3], **kwargs)
#     if pretrained: model.load("jittorhub://resnet152.pkl")
#     return model